// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	model "redditclone/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockauthService is a mock of authService interface.
type MockauthService struct {
	ctrl     *gomock.Controller
	recorder *MockauthServiceMockRecorder
}

// MockauthServiceMockRecorder is the mock recorder for MockauthService.
type MockauthServiceMockRecorder struct {
	mock *MockauthService
}

// NewMockauthService creates a new mock instance.
func NewMockauthService(ctrl *gomock.Controller) *MockauthService {
	mock := &MockauthService{ctrl: ctrl}
	mock.recorder = &MockauthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthService) EXPECT() *MockauthServiceMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockauthService) LoginUser(cred model.Credential) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", cred)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockauthServiceMockRecorder) LoginUser(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockauthService)(nil).LoginUser), cred)
}

// RegisterUser mocks base method.
func (m *MockauthService) RegisterUser(cred model.Credential) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", cred)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockauthServiceMockRecorder) RegisterUser(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockauthService)(nil).RegisterUser), cred)
}

// MockpostsService is a mock of postsService interface.
type MockpostsService struct {
	ctrl     *gomock.Controller
	recorder *MockpostsServiceMockRecorder
}

// MockpostsServiceMockRecorder is the mock recorder for MockpostsService.
type MockpostsServiceMockRecorder struct {
	mock *MockpostsService
}

// NewMockpostsService creates a new mock instance.
func NewMockpostsService(ctrl *gomock.Controller) *MockpostsService {
	mock := &MockpostsService{ctrl: ctrl}
	mock.recorder = &MockpostsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostsService) EXPECT() *MockpostsServiceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockpostsService) AddComment(postID, commentText string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", postID, commentText, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockpostsServiceMockRecorder) AddComment(postID, commentText, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockpostsService)(nil).AddComment), postID, commentText, usr)
}

// CreateTextPost mocks base method.
func (m *MockpostsService) CreateTextPost(input model.TextPostInput, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTextPost", input, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTextPost indicates an expected call of CreateTextPost.
func (mr *MockpostsServiceMockRecorder) CreateTextPost(input, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTextPost", reflect.TypeOf((*MockpostsService)(nil).CreateTextPost), input, usr)
}

// CreateURLPost mocks base method.
func (m *MockpostsService) CreateURLPost(input model.URLPostInput, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLPost", input, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURLPost indicates an expected call of CreateURLPost.
func (mr *MockpostsServiceMockRecorder) CreateURLPost(input, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLPost", reflect.TypeOf((*MockpostsService)(nil).CreateURLPost), input, usr)
}

// DeleteComment mocks base method.
func (m *MockpostsService) DeleteComment(postID, commentID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", postID, commentID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockpostsServiceMockRecorder) DeleteComment(postID, commentID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockpostsService)(nil).DeleteComment), postID, commentID, usr)
}

// DeletePost mocks base method.
func (m *MockpostsService) DeletePost(postID string, usr model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postID, usr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockpostsServiceMockRecorder) DeletePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockpostsService)(nil).DeletePost), postID, usr)
}

// DownvotePost mocks base method.
func (m *MockpostsService) DownvotePost(postID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvotePost", postID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownvotePost indicates an expected call of DownvotePost.
func (mr *MockpostsServiceMockRecorder) DownvotePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvotePost", reflect.TypeOf((*MockpostsService)(nil).DownvotePost), postID, usr)
}

// GetAllPosts mocks base method.
func (m *MockpostsService) GetAllPosts() ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockpostsServiceMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockpostsService)(nil).GetAllPosts))
}

// GetPostByID mocks base method.
func (m *MockpostsService) GetPostByID(postID string) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockpostsServiceMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockpostsService)(nil).GetPostByID), postID)
}

// GetPostsByAuthor mocks base method.
func (m *MockpostsService) GetPostsByAuthor(username string) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByAuthor", username)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByAuthor indicates an expected call of GetPostsByAuthor.
func (mr *MockpostsServiceMockRecorder) GetPostsByAuthor(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByAuthor", reflect.TypeOf((*MockpostsService)(nil).GetPostsByAuthor), username)
}

// GetPostsByCategory mocks base method.
func (m *MockpostsService) GetPostsByCategory(category string) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", category)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockpostsServiceMockRecorder) GetPostsByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockpostsService)(nil).GetPostsByCategory), category)
}

// UnvotePost mocks base method.
func (m *MockpostsService) UnvotePost(postID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnvotePost", postID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnvotePost indicates an expected call of UnvotePost.
func (mr *MockpostsServiceMockRecorder) UnvotePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnvotePost", reflect.TypeOf((*MockpostsService)(nil).UnvotePost), postID, usr)
}

// UpvotePost mocks base method.
func (m *MockpostsService) UpvotePost(postID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvotePost", postID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpvotePost indicates an expected call of UpvotePost.
func (mr *MockpostsServiceMockRecorder) UpvotePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvotePost", reflect.TypeOf((*MockpostsService)(nil).UpvotePost), postID, usr)
}

// MockusersService is a mock of usersService interface.
type MockusersService struct {
	ctrl     *gomock.Controller
	recorder *MockusersServiceMockRecorder
}

// MockusersServiceMockRecorder is the mock recorder for MockusersService.
type MockusersServiceMockRecorder struct {
	mock *MockusersService
}

// NewMockusersService creates a new mock instance.
func NewMockusersService(ctrl *gomock.Controller) *MockusersService {
	mock := &MockusersService{ctrl: ctrl}
	mock.recorder = &MockusersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockusersService) EXPECT() *MockusersServiceMockRecorder {
	return m.recorder
}

// GetUserByID mocks base method.
func (m *MockusersService) GetUserByID(userID string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockusersServiceMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockusersService)(nil).GetUserByID), userID)
}

// MockappService is a mock of appService interface.
type MockappService struct {
	ctrl     *gomock.Controller
	recorder *MockappServiceMockRecorder
}

// MockappServiceMockRecorder is the mock recorder for MockappService.
type MockappServiceMockRecorder struct {
	mock *MockappService
}

// NewMockappService creates a new mock instance.
func NewMockappService(ctrl *gomock.Controller) *MockappService {
	mock := &MockappService{ctrl: ctrl}
	mock.recorder = &MockappServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockappService) EXPECT() *MockappServiceMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockappService) AddComment(postID, commentText string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", postID, commentText, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockappServiceMockRecorder) AddComment(postID, commentText, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockappService)(nil).AddComment), postID, commentText, usr)
}

// CreateTextPost mocks base method.
func (m *MockappService) CreateTextPost(input model.TextPostInput, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTextPost", input, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTextPost indicates an expected call of CreateTextPost.
func (mr *MockappServiceMockRecorder) CreateTextPost(input, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTextPost", reflect.TypeOf((*MockappService)(nil).CreateTextPost), input, usr)
}

// CreateURLPost mocks base method.
func (m *MockappService) CreateURLPost(input model.URLPostInput, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLPost", input, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURLPost indicates an expected call of CreateURLPost.
func (mr *MockappServiceMockRecorder) CreateURLPost(input, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLPost", reflect.TypeOf((*MockappService)(nil).CreateURLPost), input, usr)
}

// DeleteComment mocks base method.
func (m *MockappService) DeleteComment(postID, commentID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", postID, commentID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockappServiceMockRecorder) DeleteComment(postID, commentID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockappService)(nil).DeleteComment), postID, commentID, usr)
}

// DeletePost mocks base method.
func (m *MockappService) DeletePost(postID string, usr model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postID, usr)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockappServiceMockRecorder) DeletePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockappService)(nil).DeletePost), postID, usr)
}

// DownvotePost mocks base method.
func (m *MockappService) DownvotePost(postID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvotePost", postID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownvotePost indicates an expected call of DownvotePost.
func (mr *MockappServiceMockRecorder) DownvotePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvotePost", reflect.TypeOf((*MockappService)(nil).DownvotePost), postID, usr)
}

// GetAllPosts mocks base method.
func (m *MockappService) GetAllPosts() ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockappServiceMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockappService)(nil).GetAllPosts))
}

// GetPostByID mocks base method.
func (m *MockappService) GetPostByID(postID string) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockappServiceMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockappService)(nil).GetPostByID), postID)
}

// GetPostsByAuthor mocks base method.
func (m *MockappService) GetPostsByAuthor(username string) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByAuthor", username)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByAuthor indicates an expected call of GetPostsByAuthor.
func (mr *MockappServiceMockRecorder) GetPostsByAuthor(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByAuthor", reflect.TypeOf((*MockappService)(nil).GetPostsByAuthor), username)
}

// GetPostsByCategory mocks base method.
func (m *MockappService) GetPostsByCategory(category string) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", category)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockappServiceMockRecorder) GetPostsByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockappService)(nil).GetPostsByCategory), category)
}

// GetUserByID mocks base method.
func (m *MockappService) GetUserByID(userID string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockappServiceMockRecorder) GetUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockappService)(nil).GetUserByID), userID)
}

// LoginUser mocks base method.
func (m *MockappService) LoginUser(cred model.Credential) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", cred)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockappServiceMockRecorder) LoginUser(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockappService)(nil).LoginUser), cred)
}

// RegisterUser mocks base method.
func (m *MockappService) RegisterUser(cred model.Credential) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", cred)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockappServiceMockRecorder) RegisterUser(cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockappService)(nil).RegisterUser), cred)
}

// UnvotePost mocks base method.
func (m *MockappService) UnvotePost(postID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnvotePost", postID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnvotePost indicates an expected call of UnvotePost.
func (mr *MockappServiceMockRecorder) UnvotePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnvotePost", reflect.TypeOf((*MockappService)(nil).UnvotePost), postID, usr)
}

// UpvotePost mocks base method.
func (m *MockappService) UpvotePost(postID string, usr model.User) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvotePost", postID, usr)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpvotePost indicates an expected call of UpvotePost.
func (mr *MockappServiceMockRecorder) UpvotePost(postID, usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvotePost", reflect.TypeOf((*MockappService)(nil).UpvotePost), postID, usr)
}
